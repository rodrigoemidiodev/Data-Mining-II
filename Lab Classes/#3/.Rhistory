install.packages("tidyverse")
prices
prices
prices <- c(Portugal=10.3, Spain=10.6, Italy=11.5, France=12.3, Germany=9.9, Greece=9.3, UK=11.4, Finland=10.9, Belgium=12.1, Austria=9.1)
prices
prices_with_vat <- 1.23*prices
prices_with_vat
prices[prices > 10]
prices[prices > mean(prices)]
prices[prices > 10 & prices < 11]
raised_prices <- 1.1 * prices
raised_prices
lower_prices <- prices[prices > mean(prices)] * 0,975
lower_prices <- prices[prices > mean(prices)] * 0.975
lower_prices
euro2currency <- function(value, currency) value * exchange_rate["currency"]
euro2currency(3, usd)
euro2currency(3, "usd")
exchange_rate <- c(usd=1.0458, gbp=0.8276, jpy=156.11, chf=0.9389, huf=403.0416)
euro2currency <- function(value, currency) value * exchange_rate["currency"]
euro2currency(2, "usd")
euro2currency(2, usd)
euro2currency <- function(value, currency) value * exchange_rate[currency]
euro2currency(2, usd)
euro2currency(2, "usd")
amounts <- [50, 100, 150]
euro2currency(amounts, "chf")
amounts <- [50, 100, 150]
amounts <- c(50, 100, 150)
euro2currency(amounts, "chf")
help(Boston, package='MASS')
data(Boston, package='MASS')
prices <- data(Boston, package='MASS')
prices
packages.install('MASS')
install.packages('MASS')
prices <- data(Boston, package='MASS')
prices
library(MASS)
data(Boston)
str(Boston)
data(Boston, package = 'MASS')
str(Boston)
prices <- data(Boston, package = 'MASS')
str(prices)
str(Boston)
data(Boston, package = 'MASS')
subset(Boston, medv > 45)
subset(Boston, rm > 8, c(nox, tax))
subset(Boston, medv > 10 & medv < 15)
subset(Boston, medv >= 10 & medv <= 15)
subset(Boston, rm > 6, c(mean(crim)))
mean(Boston$crim(Boston$rm > 6))
mean(Boston$crim[Boston$rm > 6])
install.packages("dplyr")
library(arules)
library(arulesViz)
install.packages('arulesViz')
library(arulesViz)
data(Groceries)
Groceries
class(Groceries)
# Get information on the dataset
summary(Groceries)
# Get the size of the dataset
size(Groceries)
# Get the size of the dataset
head(size(Groceries))
# Inspect the dataset and its type
Groceries
class(Groceries)
# Get information on the dataset
summary(Groceries)
# Get the size of the dataset
head(size(Groceries))
# Get the first five transactions
inspect(Groceries[1:5])
size(Groceries)
# Check if there are duplicated transactions
unique(Groceries)
# Check if there are duplicated transactions
length(which(unique(Groceries)))
# Check if there are duplicated transactions
length(which(duplicated(Groceries)))
# See the relative frequency of each item
head(itemFrequency(Groceries))
# Plot the top 5 more frequent items
head(itemFrequencyPlot(Groceries))
# Plot the top 5 more frequent items
itemFrequencyPlot(Groceries, topN = 5)
# Plot the items that have a support value of at least 0.1
itemFrequencyPlot(Groceries, support = 0.1)
# Obtain the frequent itemsets for a minimum support of 0.01
itemsets <- apriori(Groceries, parameter = list(supp = 0.1, target = "frequent itemsets"))
class(itemsets)
class(itemsets)
class(Groceries)
# Inspect the 5 most frequent itemsets
inspect(itemsets[1:5])
# Inspect the 5 most frequent itemsets
inspect(sort(itemsets)[1:5])
# Select the subset of closed frequent itemsets and the subset of maximal frequent itemsets from the frequent itemsets obtained
itemsets[is.closed(itemsets)]
itemsets[is.maximal(itemsets)]
# Generate the rules from the dataset using apriori
rules <- apriori(Groceries)
class(rules)
# Generate new rules with updated minimum support and confidence
rules_new <- apriori(Groceries, parameter = list(supp = 0.1, conf = 0.3, minlen = 2, target = "rules"))
# Generate new rules with updated minimum support and confidence
rules_new <- apriori(Groceries, parameter = list(supp = 0.1, conf = 0.3)
# Generate new rules with updated minimum support and confidence
rules_new <- apriori(Groceries, parameter = list(supp = 0.1, conf = 0.3))
# Generate new rules with updated minimum support and confidence
rules_new <- apriori(Groceries, parameter = list(supp = 0.1, conf = 0.3))
# Generate the rules from the dataset using apriori and check its class
rules <- apriori(Groceries)
# Generate new rules with updated minimum support and confidence
rules_new <- apriori(Groceries, parameter = list(supp = 0.1, conf = 0.3))
# Obtain the rules with minsup = 0.01 and minconf = 0.25
rules <- apriori(Groceries, parameter = list(supp = 0.01, conf = 0.25))
summary(rules)
quality(rules)
quality(sort(rules))
quality(rules[1:5])
plot(rules[1:5])
inspect(rules[1:5])
# Select the rules with a lift value above 2
rules.sub <- subset(rules, subset = lift > 2)
inspect(rules.sub[1:5])
# Select the rules that have lift value above 2 and the items "whole milk" or "yogurt" on the consequent
rules.sub <- subset(rules, subset = rhs %in% c("yogurt", "whole milk") & lift > 2)
rules.sort <- sort(rules.sub, by "lift")
rules.sort <- sort(rules.sub, by = "lift")
inspect(rules.sort[1:5])
plot(rules.sub)
plot(rules.sub, method = "graph")
# Load necessary packages
library(arules)
library(arulesViz)
library(tidyverse)
# Set the working directory dinamically
wd <- readline(prompt = "Enter the path to your working directory: ")
# Set the working directory dinamically
wd <- readline(prompt = "Enter the path to your working directory: ")
setwd(wd)
# Read the csv file into a data frame
df <- read.csv("german_credit.csv")
# Remove the first attribute from the data frame
df <- df %>% select(-default)
# Convert the data frame into a transactions data set
dfT <- as(df, "transactions")
df <- df %>%
mutate_if(is.character, as.factor)
df <- df %>%
discretizeDF(methods=list(duration_in_month = list(method = "interval", 4, labels = c("short", "med-short", "med_long", "long")),
credit_amount = list(method = "interval", 4, labels = c("small", "med-small", "med-high", "high")),
age = list(method = "interval", 4, labels = c("young adult", "adult", "senior", "golden"))),
default = list(method = "interval"))
# Convert the data frame into a data set of transactions. Use the function itemInfo to see what each item represents
dfT <- as(df, "transactions")
item_dfT <- itemInfo(dfT)
head(item_dfT)
subset(item_dfT, variables == "duration_in_month")
# Obtain the association rules from the data set using apriori. Plot the rules
rules <- apriori(dfT)
plot(rules)
# Select the rules with confidence equal to 1 and lift higher than 1.1. Plot them using engine="htmlwidget"
rules_new <- subset(rules, confidence == 1 & lift > 1.1)
plot(rules_new, engine="htmlwidget")
# Run apriori using a minimum confidence of 0.6, minimum length of 2 and focusing only on attributes sex, age, job, housing and purpose of credit. Plot the rules with method="graph" and engine="htmlwidget"
myItems <- subset(item_dfT, variables %in% c("age", "personal_status_sex", "job", "housing", "purpose"))$labels
rules <- apriori(dfT,
parameter = list(conf=0.6, minlen=2),
appearance = list(both = myItems, default="none"))
plot(rules, engine="htmlwidget", method="graph")
# Obtain the rules that relate the purpose of credit with age, job and housing using apriori. Impose a minimum support of 0.05, minimum confidence of 0.25 and a minimum length of 2
my.lhs <- subset(item_dfT, variables %in% c("age", "job", "housing"))$labels
my.rhs <- subset(item_dfT, variables == "purpose")$labels
rules1 <- apriori(dfT, parameter = list(confidence = 0.25, minlen = 2, support = 0.05),
appearance = list(lhs = my.lhs, rhs = my.rhs, default = "none"))
# Plot the obtained rules
plot(rules1, method = "graph", engine = "htmlwidget")
# Plot the previous set of rules using the method grouped
plot(rules1, method = "grouped")
